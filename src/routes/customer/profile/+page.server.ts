import type { PageServerLoad, Actions } from './$types.js';
import PocketBase from 'pocketbase';
import { PUBLIC_POCKETBASE_URL } from '$env/static/public';
import { redirect, fail } from '@sveltejs/kit';

const pb = new PocketBase(PUBLIC_POCKETBASE_URL);

export const load: PageServerLoad = async ({ cookies }) => {
	try {
		// ‡∏ï‡∏≠‡∏ô‡∏ô‡∏µ‡πâ‡∏¢‡∏±‡∏á‡πÑ‡∏°‡πà‡∏°‡∏µ session management ‡πÉ‡∏ä‡πâ hardcode ‡∏Å‡πà‡∏≠‡∏ô
		const userId = "5v70v6p91pfakvb"; // hardcode user ID ‡∏ó‡∏µ‡πà‡∏°‡∏µ‡∏≠‡∏¢‡∏π‡πà‡∏à‡∏£‡∏¥‡∏á (TheBug)
		
		console.log('üë§ Loading profile for User ID:', userId);
		
		// ‡∏î‡∏∂‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏ú‡∏π‡πâ‡πÉ‡∏ä‡πâ‡∏à‡∏≤‡∏Å PocketBase users collection
		let userRecord: any = null;
		let userName = '‡∏ú‡∏π‡πâ‡πÉ‡∏ä‡πâ';
		let userEmail = '';
		let userAvatar = '';
		let userRole = '';
		
		try {
			userRecord = await pb.collection('_pb_users_auth_').getOne(userId);
			
			// ‡πÄ‡∏ä‡πá‡∏Ñ Role ‡∏ß‡πà‡∏≤‡πÄ‡∏õ‡πá‡∏ô user ‡∏´‡∏£‡∏∑‡∏≠‡πÑ‡∏°‡πà
			userRole = userRecord.Role || '';
			console.log('üîê User Role:', userRole);
			
			// ‡πÄ‡∏ä‡πá‡∏Ñ Role (‡∏ï‡∏≠‡∏ô‡∏ô‡∏µ‡πâ skip ‡πÑ‡∏õ‡∏Å‡πà‡∏≠‡∏ô ‡πÄ‡∏û‡∏£‡∏≤‡∏∞‡∏¢‡∏±‡∏á‡πÑ‡∏°‡πà‡∏°‡∏µ session management)
			// Role ‡∏ó‡∏µ‡πà‡∏≠‡∏ô‡∏∏‡∏ç‡∏≤‡∏ï: 000000000000001 (user), 000000000000002 (user)
			// Role ‡∏ó‡∏µ‡πà‡πÑ‡∏°‡πà‡∏≠‡∏ô‡∏∏‡∏ç‡∏≤‡∏ï: 000000000000003 (shop owner)  
			console.log('‚ÑπÔ∏è Skipping role check for testing')
			
			// ‡∏£‡∏ß‡∏°‡∏ä‡∏∑‡πà‡∏≠‡πÅ‡∏•‡∏∞‡∏ô‡∏≤‡∏°‡∏™‡∏Å‡∏∏‡∏•
			const firstName = userRecord.name || '';
			const lastName = userRecord.Lastname || '';
			userName = `${firstName} ${lastName}`.trim() || userRecord.username || '‡∏ú‡∏π‡πâ‡πÉ‡∏ä‡πâ';
			userEmail = userRecord.email || '';
			userAvatar = userRecord.avatar || '';
			console.log('‚úÖ User found:', userName, '| Email:', userEmail);
			console.log('üì∏ Avatar:', userAvatar);
		} catch (userError: any) {
			console.error('‚ö†Ô∏è User fetch error:', userError);
			console.error('‚ö†Ô∏è Error details:', userError?.message, userError?.status);
			
			// ‡∏ï‡∏≠‡∏ô‡∏ô‡∏µ‡πâ‡∏¢‡∏±‡∏á‡πÑ‡∏°‡πà‡∏°‡∏µ login system ‡πÉ‡∏ä‡πâ fallback data ‡πÅ‡∏ó‡∏ô
			userName = 'Test User';
			userEmail = 'test@example.com';
			userAvatar = '';
			console.log('‚ö†Ô∏è Using fallback user data for testing');
		}
		
		// ‡∏î‡∏∂‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏• Point ‡∏Ñ‡∏á‡πÄ‡∏´‡∏•‡∏∑‡∏≠‡∏à‡∏≤‡∏Å PocketBase
		const userPointRecords = await pb.collection('Point').getFullList({
			filter: `User_ID = "${userId}"`,
			sort: '-created'
		});
		
		let userPoints = 0;
		if (userPointRecords.length > 0) {
			userPoints = userPointRecords[0].Point || 0;
		}
		
		console.log('üíé User Points:', userPoints);
		
		// ‡∏ô‡∏±‡∏ö‡∏à‡∏≥‡∏ô‡∏ß‡∏ô Order ‡∏ó‡∏µ‡πà‡πÄ‡∏Ñ‡∏¢‡∏™‡∏±‡πà‡∏á (‡∏à‡∏≤‡∏Å Payment collection)
		const paymentRecords = await pb.collection('Payment').getFullList({
			filter: `User_ID = "${userId}"`
		});
		
		const orderCount = paymentRecords.length;
		console.log('üì¶ Orders found:', orderCount);
		
		return {
			user: {
				id: userId,
				username: userName,
				email: userEmail,
				avatar: userAvatar,
				name: userName
			},
			points: userPoints,
			orderCount: orderCount
		};
		
	} catch (error: any) {
		console.error('‚ùå Error loading profile:', error);
		console.error('‚ùå Error stack:', error?.stack);
		console.error('‚ùå Error type:', typeof error);
		
		// ‡∏ñ‡πâ‡∏≤‡πÄ‡∏õ‡πá‡∏ô redirect error ‡πÉ‡∏´‡πâ throw ‡∏ï‡πà‡∏≠‡πÑ‡∏õ
		if (error instanceof Response) {
			throw error;
		}
		
		// Error ‡∏≠‡∏∑‡πà‡∏ô‡πÜ ‡πÉ‡∏´‡πâ redirect ‡πÑ‡∏õ login
		throw redirect(303, '/login');
	}
};

export const actions: Actions = {
	// ‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡πÇ‡∏õ‡∏£‡πÑ‡∏ü‡∏•‡πå
	updateProfile: async ({ cookies, request }) => {
		try {
			// ‡πÉ‡∏ä‡πâ hardcode user ID ‡πÄ‡∏´‡∏°‡∏∑‡∏≠‡∏ô‡πÉ‡∏ô load function
			const userId = "5v70v6p91pfakvb";
			
			if (!userId) {
				return fail(401, { error: '‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡πÄ‡∏Ç‡πâ‡∏≤‡∏™‡∏π‡πà‡∏£‡∏∞‡∏ö‡∏ö' });
			}

			const formData = await request.formData();
			const name = formData.get('name') as string;
			const email = formData.get('email') as string;

			console.log('üíæ Updating profile for user:', userId);
			console.log('üìù New data:', { name, email });

			// ‡πÅ‡∏¢‡∏Å‡∏ä‡∏∑‡πà‡∏≠‡πÅ‡∏•‡∏∞‡∏ô‡∏≤‡∏°‡∏™‡∏Å‡∏∏‡∏•
			const nameParts = name.trim().split(' ');
			const firstName = nameParts[0] || '';
			const lastName = nameParts.slice(1).join(' ') || '';

			// ‡∏≠‡∏±‡∏û‡πÄ‡∏î‡∏ó‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡πÉ‡∏ô PocketBase
			const updatedUser = await pb.collection('_pb_users_auth_').update(userId, {
				name: firstName,
				Lastname: lastName,
				email: email
			});

			console.log('‚úÖ Profile updated successfully');

			return {
				success: true,
				message: '‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡πÄ‡∏£‡∏µ‡∏¢‡∏ö‡∏£‡πâ‡∏≠‡∏¢‡πÅ‡∏•‡πâ‡∏ß'
			};

		} catch (error: any) {
			console.error('‚ùå Error updating profile:', error);
			return fail(500, { 
				error: '‡πÄ‡∏Å‡∏¥‡∏î‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î‡πÉ‡∏ô‡∏Å‡∏≤‡∏£‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•: ' + error.message 
			});
		}
	},

	// ‡∏≠‡∏±‡∏û‡πÇ‡∏´‡∏•‡∏î‡∏£‡∏π‡∏õ‡πÇ‡∏õ‡∏£‡πÑ‡∏ü‡∏•‡πå
	uploadAvatar: async ({ cookies, request }) => {
		try {
			// ‡πÉ‡∏ä‡πâ hardcode user ID ‡πÄ‡∏´‡∏°‡∏∑‡∏≠‡∏ô‡πÉ‡∏ô load function
			const userId = "5v70v6p91pfakvb";
			
			if (!userId) {
				console.error('‚ùå No session cookie found');
				return fail(401, { error: '‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡πÄ‡∏Ç‡πâ‡∏≤‡∏™‡∏π‡πà‡∏£‡∏∞‡∏ö‡∏ö' });
			}

			const formData = await request.formData();
			const avatar = formData.get('avatar');

			console.log('üì∏ Upload request for user:', userId);
			console.log('üìÅ Form data keys:', Array.from(formData.keys()));
			console.log('üìÅ Avatar value:', avatar);

			// ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏ß‡πà‡∏≤‡πÑ‡∏î‡πâ‡∏£‡∏±‡∏ö‡πÑ‡∏ü‡∏•‡πå‡∏´‡∏£‡∏∑‡∏≠‡πÑ‡∏°‡πà
			if (!avatar) {
				console.error('‚ùå No avatar file in form data');
				return fail(400, { error: '‡πÑ‡∏°‡πà‡∏û‡∏ö‡πÑ‡∏ü‡∏•‡πå‡∏£‡∏π‡∏õ‡∏†‡∏≤‡∏û' });
			}

			// ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏ß‡πà‡∏≤‡πÄ‡∏õ‡πá‡∏ô File object
			if (!(avatar instanceof File)) {
				console.error('‚ùå Avatar is not a File object:', typeof avatar);
				return fail(400, { error: '‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡πÑ‡∏ü‡∏•‡πå‡πÑ‡∏°‡πà‡∏ñ‡∏π‡∏Å‡∏ï‡πâ‡∏≠‡∏á' });
			}

			if (avatar.size === 0) {
				console.error('‚ùå Avatar file is empty');
				return fail(400, { error: '‡πÑ‡∏ü‡∏•‡πå‡∏£‡∏π‡∏õ‡∏†‡∏≤‡∏û‡∏ß‡πà‡∏≤‡∏á‡πÄ‡∏õ‡∏•‡πà‡∏≤' });
			}

			// ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏Ç‡∏ô‡∏≤‡∏î‡πÑ‡∏ü‡∏•‡πå (‡∏à‡∏≥‡∏Å‡∏±‡∏î 5MB)
			if (avatar.size > 5 * 1024 * 1024) {
				console.error('‚ùå File too large:', avatar.size);
				return fail(400, { error: '‡πÑ‡∏ü‡∏•‡πå‡πÉ‡∏´‡∏ç‡πà‡πÄ‡∏Å‡∏¥‡∏ô‡πÑ‡∏õ ‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡πÄ‡∏•‡∏∑‡∏≠‡∏Å‡πÑ‡∏ü‡∏•‡πå‡∏ó‡∏µ‡πà‡πÄ‡∏•‡πá‡∏Å‡∏Å‡∏ß‡πà‡∏≤ 5MB' });
			}

			console.log('üìÅ File details:', {
				name: avatar.name,
				type: avatar.type,
				size: avatar.size
			});

			// ‡∏™‡∏£‡πâ‡∏≤‡∏á FormData ‡πÉ‡∏´‡∏°‡πà‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö PocketBase
			const pbFormData = new FormData();
			pbFormData.append('avatar', avatar, avatar.name);

			console.log('üì§ Sending to PocketBase...');

			// ‡∏≠‡∏±‡∏û‡πÇ‡∏´‡∏•‡∏î‡πÑ‡∏õ‡∏¢‡∏±‡∏á PocketBase
			const updatedUser = await pb.collection('_pb_users_auth_').update(userId, pbFormData);

			console.log('‚úÖ Avatar uploaded successfully:', updatedUser.avatar);

			return {
				success: true,
				message: '‡∏≠‡∏±‡∏û‡πÇ‡∏´‡∏•‡∏î‡∏£‡∏π‡∏õ‡πÇ‡∏õ‡∏£‡πÑ‡∏ü‡∏•‡πå‡πÄ‡∏£‡∏µ‡∏¢‡∏ö‡∏£‡πâ‡∏≠‡∏¢‡πÅ‡∏•‡πâ‡∏ß',
				avatar: updatedUser.avatar
			};

		} catch (error: any) {
			console.error('‚ùå Error uploading avatar:', error);
			console.error('‚ùå Error details:', {
				message: error.message,
				status: error.status,
				response: error.response
			});
			return fail(500, { 
				error: '‡πÄ‡∏Å‡∏¥‡∏î‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î‡πÉ‡∏ô‡∏Å‡∏≤‡∏£‡∏≠‡∏±‡∏û‡πÇ‡∏´‡∏•‡∏î‡∏£‡∏π‡∏õ: ' + (error.message || 'Unknown error')
			});
		}
	}
};
